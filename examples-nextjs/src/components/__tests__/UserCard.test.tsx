import { render, screen, fireEvent } from "@testing-library/react";
import { UserCard } from "../UserCard";

// Mock window.alert for testing
const mockAlert = jest.fn();
const mockConfirm = jest.fn();
window.alert = mockAlert;
window.confirm = mockConfirm;

const mockUser = {
  id: 1,
  name: "John Doe",
  email: "john@example.com",
  role: "Admin",
  avatar: "👨‍💼",
};

describe("UserCard", () => {
  beforeEach(() => {
    mockAlert.mockClear();
    mockConfirm.mockClear();
  });

  it("should render user information with automatic test IDs", () => {
    render(<UserCard user={mockUser} />);

    // These test IDs are automatically generated by our plugin!
    expect(screen.getByTestId("UserCard.div")).toBeInTheDocument();
    expect(screen.getByTestId("UserCard.header")).toBeInTheDocument();
    expect(screen.getByTestId("UserCard.h3")).toHaveTextContent("John Doe");
    expect(screen.getByTestId("UserCard.main")).toBeInTheDocument();
    expect(screen.getByTestId("UserCard.footer")).toBeInTheDocument();

    // Check user details
    expect(screen.getByText("john@example.com")).toBeInTheDocument();
    expect(screen.getByText("👨‍💼")).toBeInTheDocument();
    expect(screen.getByText("Active Admin")).toBeInTheDocument();
  });

  it("should handle edit button click", () => {
    render(<UserCard user={mockUser} />);

    // Find button by automatic test ID
    const editButton = screen.getByTestId("UserCard.button");
    expect(editButton).toHaveTextContent("Edit User");

    fireEvent.click(editButton);
    expect(mockAlert).toHaveBeenCalledWith("Editing user: John Doe");
  });

  it("should handle delete button click with confirmation", () => {
    mockConfirm.mockReturnValue(true);
    render(<UserCard user={mockUser} />);

    // Get all buttons and find the delete one
    const buttons = screen.getAllByTestId("UserCard.button");
    const deleteButton = buttons.find(
      (button) => button.textContent === "Delete"
    );

    fireEvent.click(deleteButton!);

    expect(mockConfirm).toHaveBeenCalledWith("Delete user John Doe?");
    expect(mockAlert).toHaveBeenCalledWith("User John Doe deleted");
  });

  it("should cancel delete when user clicks cancel", () => {
    mockConfirm.mockReturnValue(false);
    render(<UserCard user={mockUser} />);

    const buttons = screen.getAllByTestId("UserCard.button");
    const deleteButton = buttons.find(
      (button) => button.textContent === "Delete"
    );

    fireEvent.click(deleteButton!);

    expect(mockConfirm).toHaveBeenCalledWith("Delete user John Doe?");
    expect(mockAlert).not.toHaveBeenCalled();
  });

  it("should render different status for regular user", () => {
    const regularUser = { ...mockUser, role: "User" };
    render(<UserCard user={regularUser} />);

    expect(screen.getByText("Regular User")).toBeInTheDocument();
    expect(screen.queryByText("Active Admin")).not.toBeInTheDocument();
  });
});
