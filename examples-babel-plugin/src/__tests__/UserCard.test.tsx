import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { UserCard } from "../components/UserCard";

// Mock user data
const mockUser = {
  id: 1,
  name: "John Doe",
  email: "john@example.com",
  role: "Admin",
  avatar: "👨‍💼",
};

// Mock window.alert and window.confirm
const mockAlert = jest.fn();
const mockConfirm = jest.fn();
global.alert = mockAlert;
global.confirm = mockConfirm;

describe("UserCard Component", () => {
  beforeEach(() => {
    mockAlert.mockClear();
    mockConfirm.mockClear();
  });

  test("renders user information correctly", () => {
    render(<UserCard user={mockUser} />);

    // These test IDs are automatically generated by the Babel plugin!
    expect(screen.getByTestId("UserCard.div")).toBeInTheDocument();
    expect(screen.getByTestId("UserCard.h3")).toHaveTextContent("John Doe");
    expect(screen.getByTestId("UserCard.p")).toHaveTextContent(
      "john@example.com"
    );
    expect(screen.getByTestId("UserCard.span")).toHaveTextContent("Admin");
  });

  test("displays user avatar", () => {
    render(<UserCard user={mockUser} />);

    // Avatar span should contain the emoji
    const avatarSpan = screen.getByTestId("UserCard.span");
    expect(avatarSpan).toHaveTextContent("👨‍💼");
  });

  test("shows user ID and status in footer", () => {
    render(<UserCard user={mockUser} />);

    // Check footer stats
    const userStats = screen.getByTestId("UserCard.footer");
    expect(userStats).toBeInTheDocument();

    // User ID should be displayed
    expect(screen.getByText("1")).toBeInTheDocument();
    expect(screen.getByText("Active")).toBeInTheDocument();
  });

  test("edit button triggers alert", () => {
    render(<UserCard user={mockUser} />);

    const editButton = screen.getByText("Edit User");
    fireEvent.click(editButton);

    expect(mockAlert).toHaveBeenCalledWith("Editing user: John Doe");
  });

  test("delete button shows confirmation dialog", () => {
    mockConfirm.mockReturnValue(true);
    render(<UserCard user={mockUser} />);

    const deleteButton = screen.getByText("Delete");
    fireEvent.click(deleteButton);

    expect(mockConfirm).toHaveBeenCalledWith(
      "Are you sure you want to delete John Doe?"
    );
    expect(mockAlert).toHaveBeenCalledWith("User John Doe deleted!");
  });

  test("delete cancellation does not trigger alert", () => {
    mockConfirm.mockReturnValue(false);
    render(<UserCard user={mockUser} />);

    const deleteButton = screen.getByText("Delete");
    fireEvent.click(deleteButton);

    expect(mockConfirm).toHaveBeenCalled();
    expect(mockAlert).not.toHaveBeenCalled();
  });

  test("has correct CSS classes for styling", () => {
    render(<UserCard user={mockUser} />);

    expect(screen.getByTestId("UserCard.div")).toHaveClass("user-card");
    expect(screen.getByText("Edit User")).toHaveClass("btn", "btn-primary");
    expect(screen.getByText("Delete")).toHaveClass("btn", "btn-danger");
  });

  test("renders different user data correctly", () => {
    const anotherUser = {
      id: 2,
      name: "Jane Smith",
      email: "jane@example.com",
      role: "User",
      avatar: "👩‍💻",
    };

    render(<UserCard user={anotherUser} />);

    expect(screen.getByTestId("UserCard.h3")).toHaveTextContent("Jane Smith");
    expect(screen.getByTestId("UserCard.p")).toHaveTextContent(
      "jane@example.com"
    );
    expect(screen.getByText("User")).toBeInTheDocument();
    expect(screen.getByText("👩‍💻")).toBeInTheDocument();
  });
});
